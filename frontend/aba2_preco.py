# aba2_preco.py

import streamlit as st
import pandas as pd
import plotly.express as px
#from app_utils import get_data  # Ou o caminho do seu get_data se estiver separado

def render_preco(get_data):
    st.header("üí∞ An√°lise de Pre√ßo por √Årea")

    price_stats = get_data("houses/price-stats")
    if price_stats:
        # KPIs
        st.subheader("üìä Indicadores de Pre√ßo")
        col1, col2, col3, col4 = st.columns(4)
        col1.metric("Pre√ßo M√©dio", f"${price_stats['price_avg']:,.2f}")
        col2.metric("Pre√ßo Mediano", f"${price_stats['price_median']:,.2f}")
        col3.metric("Pre√ßo M√≠nimo", f"${price_stats['price_min']:,.2f}")
        col4.metric("Pre√ßo M√°ximo", f"${price_stats['price_max']:,.2f}")

        # Histograma de Pre√ßos
        st.subheader("üìà Distribui√ß√£o de Pre√ßos")
        prices = price_stats.get("price_distribution", [])
        if prices:
            df_prices = pd.DataFrame(prices, columns=["Pre√ßo"])
            fig_hist = px.histogram(df_prices, x="Pre√ßo", nbins=30,
                                    title="Distribui√ß√£o dos Pre√ßos",
                                    labels={'Pre√ßo': 'Pre√ßo ($)', 'y': 'Contagem'},
                                    template="plotly_white")
            st.plotly_chart(fig_hist, use_container_width=True)

            # Boxplot
            st.subheader("üì¶ Boxplot de Pre√ßos")
            fig_box = px.box(df_prices, y="Pre√ßo", title="Boxplot dos Pre√ßos",
                             labels={'Pre√ßo': 'Pre√ßo ($)'},
                             template="plotly_white")
            st.plotly_chart(fig_box, use_container_width=True)
        else:
            st.warning("Nenhuma distribui√ß√£o de pre√ßo dispon√≠vel.")

        # Barras - Pre√ßo M√©dio por Qualidade
        st.subheader("üè† Pre√ßo M√©dio por Qualidade da Estrutura")
        quality_price_avg = price_stats.get("quality_price_avg", {})
        if quality_price_avg:
            df_quality = pd.DataFrame(list(quality_price_avg.items()), columns=["Qualidade", "Pre√ßo M√©dio"])
            fig_bar = px.bar(df_quality, x="Qualidade", y="Pre√ßo M√©dio",
                             title="Pre√ßo M√©dio por Qualidade da Estrutura",
                             labels={"Qualidade": "Qualidade da Estrutura", "Pre√ßo M√©dio": "Pre√ßo ($)"},
                             template="plotly_white")
            st.plotly_chart(fig_bar, use_container_width=True)
        else:
            st.warning("Dados de pre√ßo m√©dio por qualidade n√£o encontrados.")

        # Dispers√£o - √Årea vs Pre√ßo
        st.subheader("üìê Rela√ß√£o entre √Årea e Pre√ßo")
        living_area = price_stats.get("living_area_distribution", [])
        if prices and living_area and len(prices) == len(living_area):
            df_area_price = pd.DataFrame({
                "√Årea (sq ft)": living_area,
                "Pre√ßo ($)": prices
            })
            fig_scatter = px.scatter(df_area_price, x="√Årea (sq ft)", y="Pre√ßo ($)",
                                     title="Correla√ß√£o entre √Årea e Pre√ßo",
                                     labels={"√Årea (sq ft)": "√Årea (sq ft)", "Pre√ßo ($)": "Pre√ßo ($)"},
                                     template="plotly_white")
            st.plotly_chart(fig_scatter, use_container_width=True)
        else:
            st.warning("Dados de √°rea e pre√ßo n√£o encontrados ou incompat√≠veis.")
    else:
        st.warning("Dados de pre√ßo n√£o encontrados.")
