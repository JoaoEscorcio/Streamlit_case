import streamlit as st
import pandas as pd
import plotly.express as px

def render_distancias(get_data):
    st.header("üöó Impacto da Dist√¢ncia no Pre√ßo")

    distance_stats = get_data("houses/distance-impact")
    if distance_stats:
        # KPIs 1
        st.subheader("üìä Indicadores de Pre√ßo por Dist√¢ncia")
        col1, col2, col3 = st.columns(3)
        col1.metric("Pre√ßo M√©dio Pr√≥ximo ao Oceano", f"${distance_stats['avg_price_near_ocean']:,.2f}")
        col2.metric("Pre√ßo M√©dio Longe do Oceano", f"${distance_stats['avg_price_far_from_ocean']:,.2f}")
        col3.metric("N¬∫ Im√≥veis Pr√≥ximos ao Oceano", f"{distance_stats['count_near_ocean']}")

        col4, col5, col6 = st.columns(3)
        col4.metric("Pre√ßo M√©dio Pr√≥ximo √† Rodovia", f"${distance_stats['avg_price_near_highway']:,.2f}")
        col5.metric("Pre√ßo M√©dio Longe da Rodovia", f"${distance_stats['avg_price_far_from_highway']:,.2f}")
        col6.metric("N¬∫ Im√≥veis Pr√≥ximos √† Rodovia", f"{distance_stats['count_near_highway']}")

        col7, col8, col9 = st.columns(3)
        col7.metric("Pre√ßo com Ru√≠do A√©reo", 
                   f"${distance_stats['avg_price_airport_noise']:,.2f}" if distance_stats['avg_price_airport_noise'] else "N/A")
        col8.metric("Pre√ßo sem Ru√≠do A√©reo", 
                   f"${distance_stats['avg_price_no_airport_noise']:,.2f}" if distance_stats['avg_price_no_airport_noise'] else "N/A")
        col9.metric("N¬∫ Im√≥veis com Ru√≠do", 
                   f"{distance_stats['count_airport_noise']}" if distance_stats['count_airport_noise'] else "N/A")

        # Gr√°fico de Barras
        st.subheader("üìä Pre√ßo M√©dio por Categoria de Dist√¢ncia")
        df_dist = pd.DataFrame({
            "Categoria": ["Perto Oceano", "Longe Oceano", "Perto Rodovia", "Longe Rodovia", "Com Ru√≠do", "Sem Ru√≠do"],
            "Pre√ßo M√©dio": [
                distance_stats.get('avg_price_near_ocean', 0),
                distance_stats.get('avg_price_far_from_ocean', 0),
                distance_stats.get('avg_price_near_highway', 0),
                distance_stats.get('avg_price_far_from_highway', 0),
                distance_stats.get('avg_price_airport_noise', 0),
                distance_stats.get('avg_price_no_airport_noise', 0)
            ]
        })
        fig_bar = px.bar(
            df_dist, x="Categoria", y="Pre√ßo M√©dio", 
            title="Pre√ßo M√©dio por Categoria de Dist√¢ncia",
            labels={"Categoria": "Categoria", "Pre√ßo M√©dio": "Pre√ßo ($)"}
        )
        fig_bar.update_layout(
            plot_bgcolor='rgba(0,0,0,0)',
            paper_bgcolor='rgba(0,0,0,0)',
            font=dict(color="#31333F"),
            title_font=dict(size=18, color="#31333F"),
            hoverlabel=dict(bgcolor="#F0F2F6", font_size=12)
        )
        st.plotly_chart(fig_bar, use_container_width=True)

        # Boxplot de Pre√ßos
        st.subheader("üì¶ Distribui√ß√£o de Pre√ßos por Categoria")
        df_boxplot = pd.DataFrame({
            "Categoria": (
                ["Perto Oceano"] * len(distance_stats['prices_near_ocean']) +
                ["Longe Oceano"] * len(distance_stats['prices_far_ocean']) +
                ["Perto Rodovia"] * len(distance_stats['prices_near_highway']) +
                ["Longe Rodovia"] * len(distance_stats['prices_far_highway']) +
                ["Com Ru√≠do"] * len(distance_stats['prices_airport_noise']) +
                ["Sem Ru√≠do"] * len(distance_stats['prices_no_airport_noise'])
            ),
            "Pre√ßo": (
                distance_stats['prices_near_ocean'] + distance_stats['prices_far_ocean'] +
                distance_stats['prices_near_highway'] + distance_stats['prices_far_highway'] +
                distance_stats['prices_airport_noise'] + distance_stats['prices_no_airport_noise']
            )
        })
        fig_box = px.box(
            df_boxplot, x="Categoria", y="Pre√ßo",
            title="Boxplot de Pre√ßos por Categoria",
            labels={"Categoria": "Categoria", "Pre√ßo": "Pre√ßo ($)"}
        )
        fig_box.update_layout(
            plot_bgcolor='rgba(0,0,0,0)',
            paper_bgcolor='rgba(0,0,0,0)',
            font=dict(color="#31333F"),
            title_font=dict(size=18, color="#31333F"),
            hoverlabel=dict(bgcolor="#F0F2F6", font_size=12)
        )
        st.plotly_chart(fig_box, use_container_width=True)

        # Gr√°fico de Dispers√£o
        st.subheader("üìç Correla√ß√£o entre Dist√¢ncia e Pre√ßo")
        ocean_dist = distance_stats['prices_near_ocean'] + distance_stats['prices_far_ocean']
        hwy_dist = distance_stats['prices_near_highway'] + distance_stats['prices_far_highway']
        prices = ocean_dist + hwy_dist

        min_len = min(len(ocean_dist), len(hwy_dist), len(prices))
        if min_len > 0:
            df_scatter = pd.DataFrame({
                "Dist√¢ncia ao Oceano (m)": ocean_dist[:min_len],
                "Dist√¢ncia √† Rodovia (m)": hwy_dist[:min_len],
                "Pre√ßo": prices[:min_len]
            })
            fig_scatter = px.scatter(
                df_scatter, x="Dist√¢ncia ao Oceano (m)", y="Pre√ßo",
                title="Dist√¢ncia ao Oceano vs Pre√ßo",
                labels={"Dist√¢ncia ao Oceano (m)": "Dist√¢ncia ao Oceano (m)", "Pre√ßo": "Pre√ßo ($)"}
            )
            fig_scatter.update_layout(
                plot_bgcolor='rgba(0,0,0,0)',
                paper_bgcolor='rgba(0,0,0,0)',
                font=dict(color="#31333F"),
                title_font=dict(size=18, color="#31333F"),
                hoverlabel=dict(bgcolor="#F0F2F6", font_size=12)
            )
            st.plotly_chart(fig_scatter, use_container_width=True)
        else:
            st.warning("Dados insuficientes para o gr√°fico de dispers√£o.")
    else:
        st.warning("Dados de impacto de dist√¢ncia n√£o encontrados.")
